/*
  FSBrowser - A web-based FileSystem Browser for ESP8266 filesystems

  Copyright (c) 2015 Hristo Gochkov. All rights reserved.
  This file is part of the ESP8266WebServer library for Arduino environment.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

  See readme.md for more information.
*/

////////////////////////////////

// Select the FileSystem by uncommenting one of the lines below

#ifndef _APWEBSERVER
#define _APWEBSERVER

//#define USE_SPIFFS
// #ifdef FSOK
// #define WSERVER_LITTLEFS  
// #endif
//#define USE_SDFS

// Uncomment the following line to embed a version of the web page in the code
// (program code will be larger, but no file will have to be written to the filesystem).
// Note: the source file "extras/index_htm.h" must have been generated by "extras/reduce_index.sh"

//#define INCLUDE_FALLBACK_INDEX_HTM

////////////////////////////////

#include <Arduino.h>
#include <ESP8266WiFi.h>
#include <WiFiClient.h>
#include <ESP8266WebServer.h>
#include <ESP8266mDNS.h>
#include <SPI.h>
#include <ArduinoOTA.h>

#include <arduinoPatternList.h>


////////////////////////////////
// Utils to return HTTP codes, and determine content-type
// 



class espwebServer {
  bool fsOK = false;


  void replyOK();
  void replyOKWithMsg(const String &);
  void replyNotFound(const String &);
  void replyBadRequest(const String &);
  void replyServerError(const String &);
  void handleStatus();
  void handleJson();
  
  #ifdef FSOK
  void handleFileList();  
  bool handleFileRead(const String &);
  void handleFileCreate();
  void handleFileDelete();
  void handleFileUpload();
  #endif

  void handleNotFound();
  void handleGetEdit();
  void handleRoot();
  void handleStatu();

#ifdef WEBSERVERFLASH
    void handleBootstrap();
    void handleStyle();
    void handleBootstrapJs();
    void handleJquerry();
    void handleRootFlash();  
#endif  
public:
  ESP8266WebServer server; 

  espwebServer(int port);
  ~espwebServer(){};

  void handleClient();
  void begin();

  void setup(boolean setHandleRoot);
  void filesystem_ok(bool val);
  
  void replyJson(const String & msg);
};

#endif // WEBSERVER_H  
